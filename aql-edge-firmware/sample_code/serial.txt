serial data can arrive
	i) split into 2 halves
	ii) with more than 1 msg per receive


i):
if unterminated data exists, hold pointer in dleft; when more data arrives, check to see if it contains a termination character. If so, first output dleft before the main data.

ii) write term check as a loop, so that it can check the data block several times for additional msgs.

The fg code will use CMQTT_rx_msg to tell if a msg (or msgs) is waiting. It wil process 1 msg per 100msec timeslice. 

Need to add a queue with the same number of positions as the value of CMQTT_rx_msg. This queue will hold the message termination found on a per msg basis.

Is checking the data char by char going to be too big a strain on int time? Should we just move the process to the start of the MQTT msg decode in main()??

if (uart_bytes)
	get all available bytes
	while (not foune EOL or >) && (not at end of buffer)
		{
		search for EOL (0x0A, > chars) 
		if (EOL)	// SIMCOM data or MQTTRX data?
			"OK" 	 			=> RESP_OK
			"ERROR"  			=> RESP_ERROR
			"+CMQTT" && not "+CMQTTRX"	=> RESP_PCMQTT
			else				=> RESP_EOL
				
			if "+CMQTTRX"
				"START"		=> get and ignore next line
				"TOPIC"		=> get next line as topic
				"PAYLOAD"	=> get next line as payload
				"END"		=> set end flag

			if SIMCOM_DATA		=> send (dleft + data) to mqtt_cmd_queue
			else			
				send (dleft + data) to mqtt_data_queue
				if (end flag)  // ie, "+CMQTTRXEND" was found
					inc CMQTT_rx_msg	// (for fg code)

		else if (>)	=> send (dleft + data) to mqtt_cmd_queue // SIMCOM "now send lock"

		else		// only a part msg - leave as dleft

		}				

Note mqtt_cmds are sent through line-by line, whereas mqtt_data is only sent when +CMQTTRXEND found.
May have to check MQTT progress so no orphaned data if, say, END is missing...

if "START" 	&& mqtt_step != 0	=> mqtt_step == 0; 
if "TOPIC" 	&& mqtt_step != 1	=> mqtt_step == 0; 
if "PAYLOAD"	&& mqtt_step != 2	=> mqtt_step == 0
if "END" 	&& mqtt_step == 3	=> send_mqtt_data_block to queue; end flag = 1; mqtt_step == 0

Or use the step number to allow:
while (mqtt_data)
	read to EOL
	switch (mqtt_step)
	case 0:
		read to EOL
		if not "START", mqtt_step = 0
				else mqtt_step++;
	case 1:
		read to EOL
		if not "TOPIC", mqtt_step = 0
				else mqtt_step++;
	case 2:
		read to EOL
		get topic
		mqtt_step++;
	case 4:
		read to EOL
		if not "PAYLOAD", mqtt_step = 0
  				  else mqtt_step++;
	case 5:
		read to EOL
		get payload
		mqtt_step++;
	case 6:
		read to EOL
		if not "END", 	mqtt_step = 0
				else send to queue; inc CMQTT_rx_flag




What if an unsolicited msg is never going to occur in the middle of a SIMCOM cmd-resp? Only problem then is how fast can we change the eol char; suggest

PATTERN_DET:
	if (eol char == '>')
		change eol char to DFLT_EOL	// (immediately ready for future msgs)
		push patt pos
		uart read to '>' char
		forward the msg to the mqtt_cmd queue
	else
		determine CMQTTRX or data, etc....
